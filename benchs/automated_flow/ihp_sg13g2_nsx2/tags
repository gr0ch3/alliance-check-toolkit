!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
2	cpu.v	/^wire [7:0] P = { N, V, 2'b11, D, I, Z, C };$/;"	n
2	cpu_syncreset.v	/^wire [7:0] P = { N, V, 2'b11, D, I, Z, C };$/;"	n
A	Arlet6502.v	/^output [15:0] A;        \/\/ address bus$/;"	p
A	arlet6502.v	/^output [15:0] A;        \/\/ address bus$/;"	p
A	cpu.v	/^wire [7:0]   A = AXYS[SEL_A];           \/\/ Accumulator$/;"	n
A	cpu_syncreset.v	/^wire [7:0]   A = AXYS[SEL_A];           \/\/ Accumulator$/;"	n
ABH	cpu.v	/^reg  [7:0] ABH;         \/\/ Address Bus Register MSB$/;"	r
ABH	cpu_syncreset.v	/^reg  [7:0] ABH;         \/\/ Address Bus Register MSB$/;"	r
ABL	cpu.v	/^reg  [7:0] ABL;         \/\/ Address Bus Register LSB$/;"	r
ABL	cpu_syncreset.v	/^reg  [7:0] ABL;         \/\/ Address Bus Register LSB$/;"	r
ABS0	cpu.v	/^    ABS0   = 6'd0,  \/\/ ABS     - fetch LSB      $/;"	c
ABS0	cpu_syncreset.v	/^    ABS0   = 6'd0,  \/\/ ABS     - fetch LSB      $/;"	c
ABS1	cpu.v	/^    ABS1   = 6'd1,  \/\/ ABS     - fetch MSB$/;"	c
ABS1	cpu_syncreset.v	/^    ABS1   = 6'd1,  \/\/ ABS     - fetch MSB$/;"	c
ABSX0	cpu.v	/^    ABSX0  = 6'd2,  \/\/ ABS, X  - fetch LSB and send to ALU (+X)$/;"	c
ABSX0	cpu_syncreset.v	/^    ABSX0  = 6'd2,  \/\/ ABS, X  - fetch LSB and send to ALU (+X)$/;"	c
ABSX1	cpu.v	/^    ABSX1  = 6'd3,  \/\/ ABS, X  - fetch MSB and send to ALU (+Carry)$/;"	c
ABSX1	cpu_syncreset.v	/^    ABSX1  = 6'd3,  \/\/ ABS, X  - fetch MSB and send to ALU (+Carry)$/;"	c
ABSX2	cpu.v	/^    ABSX2  = 6'd4,  \/\/ ABS, X  - Wait for ALU (only if needed)$/;"	c
ABSX2	cpu_syncreset.v	/^    ABSX2  = 6'd4,  \/\/ ABS, X  - Wait for ALU (only if needed)$/;"	c
ADD	cpu.v	/^wire [7:0] ADD;         \/\/ Adder Hold Register (registered in ALU)$/;"	n
ADD	cpu_syncreset.v	/^wire [7:0] ADD;         \/\/ Adder Hold Register (registered in ALU)$/;"	n
ADJH	cpu.v	/^reg [3:0] ADJH;$/;"	r
ADJH	cpu_syncreset.v	/^reg [3:0] ADJH;$/;"	r
ADJL	cpu.v	/^reg [3:0] ADJL;$/;"	r
ADJL	cpu_syncreset.v	/^reg [3:0] ADJL;$/;"	r
AI	ALU.v	/^	input [7:0] AI;$/;"	p
AI	cpu.v	/^reg  [7:0] AI;          \/\/ ALU Input A$/;"	r
AI	cpu_syncreset.v	/^reg  [7:0] AI;          \/\/ ALU Input A$/;"	r
AI7	ALU.v	/^reg AI7;$/;"	r
ALU	ALU.v	/^module ALU( clk, op, right, AI, BI, CI, CO, BCD, OUT, V, Z, N, HC, RDY );$/;"	m
AN	cpu.v	/^wire AN;                \/\/ ALU negative flag$/;"	n
AN	cpu_syncreset.v	/^wire AN;                \/\/ ALU negative flag$/;"	n
AV	cpu.v	/^wire AV;                \/\/ ALU overflow flag$/;"	n
AV	cpu_syncreset.v	/^wire AV;                \/\/ ALU overflow flag$/;"	n
AXYS	cpu.v	/^reg  [7:0] AXYS[3:0];   \/\/ A, X, Y and S register file$/;"	r
AXYS	cpu_syncreset.v	/^reg  [7:0] AXYS[3:0];   \/\/ A, X, Y and S register file$/;"	r
AZ	cpu.v	/^wire AZ;                \/\/ ALU Zero flag$/;"	n
AZ	cpu_syncreset.v	/^wire AZ;                \/\/ ALU Zero flag$/;"	n
Alias	dodo.py	/^from coriolis.designflow.alias    import Alias$/;"	i
Arlet6502	Arlet6502.v	/^module Arlet6502(clk, reset, A, DI, DO, WE, IRQ, NMI, RDY);$/;"	m
BARREL_SHIFTER	picorv32.v	/^	parameter [ 0:0] BARREL_SHIFTER = 0,$/;"	c
BCD	ALU.v	/^	input BCD;		\/\/ BCD style carry$/;"	p
BI	ALU.v	/^	input [7:0] BI;$/;"	p
BI	cpu.v	/^reg  [7:0] BI;          \/\/ ALU Input B$/;"	r
BI	cpu_syncreset.v	/^reg  [7:0] BI;          \/\/ ALU Input B$/;"	r
BI7	ALU.v	/^reg BI7;$/;"	r
BRA0	cpu.v	/^    BRA0   = 6'd5,  \/\/ Branch  - fetch offset and send to ALU (+PC[7:0])$/;"	c
BRA0	cpu_syncreset.v	/^    BRA0   = 6'd5,  \/\/ Branch  - fetch offset and send to ALU (+PC[7:0])$/;"	c
BRA1	cpu.v	/^    BRA1   = 6'd6,  \/\/ Branch  - fetch opcode, and send PC[15:8] to ALU $/;"	c
BRA1	cpu_syncreset.v	/^    BRA1   = 6'd6,  \/\/ Branch  - fetch opcode, and send PC[15:8] to ALU $/;"	c
BRA2	cpu.v	/^    BRA2   = 6'd7,  \/\/ Branch  - fetch opcode (if page boundary crossed)$/;"	c
BRA2	cpu_syncreset.v	/^    BRA2   = 6'd7,  \/\/ Branch  - fetch opcode (if page boundary crossed)$/;"	c
BRK0	cpu.v	/^    BRK0   = 6'd8,  \/\/ BRK\/IRQ - push PCH, send S to ALU (-1)$/;"	c
BRK0	cpu_syncreset.v	/^    BRK0   = 6'd8,  \/\/ BRK\/IRQ - push PCH, send S to ALU (-1)$/;"	c
BRK1	cpu.v	/^    BRK1   = 6'd9,  \/\/ BRK\/IRQ - push PCL, send S to ALU (-1)$/;"	c
BRK1	cpu_syncreset.v	/^    BRK1   = 6'd9,  \/\/ BRK\/IRQ - push PCL, send S to ALU (-1)$/;"	c
BRK2	cpu.v	/^    BRK2   = 6'd10, \/\/ BRK\/IRQ - push P, send S to ALU (-1)$/;"	c
BRK2	cpu_syncreset.v	/^    BRK2   = 6'd10, \/\/ BRK\/IRQ - push P, send S to ALU (-1)$/;"	c
BRK3	cpu.v	/^    BRK3   = 6'd11, \/\/ BRK\/IRQ - write S, and fetch @ fffe$/;"	c
BRK3	cpu_syncreset.v	/^    BRK3   = 6'd11, \/\/ BRK\/IRQ - write S, and fetch @ fffe$/;"	c
Blif2Vst	dodo.py	/^from coriolis.designflow.blif2vst import Blif2Vst$/;"	i
Block	doDesign.py	/^from   coriolis.plugins.block.block         import Block$/;"	i
Block	old_doDesign.py	/^from   coriolis.plugins.block.block         import Block$/;"	i
Breakpoint	doDesign.py	/^from   coriolis.Hurricane  import DbU, Breakpoint$/;"	i
Breakpoint	old_doDesign.py	/^from   coriolis.Hurricane  import DbU, Breakpoint$/;"	i
C	cpu.v	/^reg  C = 0;             \/\/ carry flag (init at zero to avoid X's in ALU sim)$/;"	r
C	cpu_syncreset.v	/^reg  C = 0;             \/\/ carry flag (init at zero to avoid X's in ALU sim)$/;"	r
CATCH_MISALIGN	picorv32.v	/^	parameter [ 0:0] CATCH_MISALIGN = 1,$/;"	c
CI	ALU.v	/^	input CI;$/;"	p
CI	cpu.v	/^reg  CI;                \/\/ Carry In$/;"	r
CI	cpu_syncreset.v	/^reg  CI;                \/\/ Carry In$/;"	r
CO	ALU.v	/^	output CO;$/;"	p
CO	ALU.v	/^reg CO;$/;"	r
CO	cpu.v	/^wire CO;                \/\/ Carry Out $/;"	n
CO	cpu_syncreset.v	/^wire CO;                \/\/ Carry Out $/;"	n
CO9	ALU.v	/^wire CO9 = BCD & (temp_h[3:1] >= 3'd5);$/;"	n
CRL	connectors_placement.py	/^ from coriolis import CRL$/;"	i
CRL	doDesign.py	/^from   coriolis            import CRL$/;"	i
CRL	old_doDesign.py	/^from   coriolis            import CRL$/;"	i
Chip	doDesign.py	/^from   coriolis.plugins.chip.chip           import Chip$/;"	i
Chip	old_doDesign.py	/^from   coriolis.plugins.chip.chip           import Chip$/;"	i
ChipConf	doDesign.py	/^from   coriolis.plugins.chip.configuration  import ChipConf$/;"	i
ChipConf	old_doDesign.py	/^from   coriolis.plugins.chip.configuration  import ChipConf$/;"	i
Clean	dodo.py	/^from coriolis.designflow.clean    import Clean$/;"	i
CoreToChip	doDesign.py	/^from   coriolis.plugins.core2chip.sky130    import CoreToChip$/;"	i
CoreToChip	old_doDesign.py	/^from   coriolis.plugins.core2chip.sky130    import CoreToChip$/;"	i
D	cpu.v	/^reg  D = 0;             \/\/ decimal flag$/;"	r
D	cpu_syncreset.v	/^reg  D = 0;             \/\/ decimal flag$/;"	r
DECODE	cpu.v	/^    DECODE = 6'd12, \/\/ IR is valid, decode instruction, and write prev reg$/;"	c
DECODE	cpu_syncreset.v	/^    DECODE = 6'd12, \/\/ IR is valid, decode instruction, and write prev reg$/;"	c
DI	Arlet6502.v	/^input [7:0] DI;         \/\/ data in, read bus$/;"	p
DI	arlet6502.v	/^input [7:0] DI;         \/\/ data in, read bus$/;"	p
DI	cpu.v	/^input [7:0] DI;         \/\/ data in, read bus$/;"	p
DI	cpu.v	/^wire [7:0] DI;          \/\/ Data In$/;"	n
DI	cpu_syncreset.v	/^input [7:0] DI;         \/\/ data in, read bus$/;"	p
DI	cpu_syncreset.v	/^wire [7:0] DI;          \/\/ Data In$/;"	n
DIHOLD	cpu.v	/^reg  [7:0] DIHOLD;      \/\/ Hold for Data In$/;"	r
DIHOLD	cpu_syncreset.v	/^reg  [7:0] DIHOLD;      \/\/ Hold for Data In$/;"	r
DIHOLD_valid	cpu.v	/^reg  DIHOLD_valid;      \/\/$/;"	r
DIHOLD_valid	cpu_syncreset.v	/^reg  DIHOLD_valid;      \/\/$/;"	r
DIMUX	cpu.v	/^wire [7:0] DIMUX;       \/\/$/;"	n
DIMUX	cpu_syncreset.v	/^wire [7:0] DIMUX;       \/\/$/;"	n
DO	Arlet6502.v	/^output [7:0] DO;        \/\/ data out, write bus$/;"	p
DO	arlet6502.v	/^output [7:0] DO;        \/\/ data out, write bus$/;"	p
DO	cpu.v	/^output [7:0] DO;        \/\/ data out, write bus$/;"	p
DO	cpu.v	/^reg  [7:0] DO;          \/\/ Data Out $/;"	r
DO	cpu_syncreset.v	/^output [7:0] DO;        \/\/ data out, write bus$/;"	p
DO	cpu_syncreset.v	/^reg  [7:0] DO;          \/\/ Data Out $/;"	r
DOIT_CONFIG	dodo.py	/^DOIT_CONFIG = { 'verbosity' : 2 }$/;"	v
DRC	dodo.py	/^from coriolis.designflow.klayout  import DRC$/;"	i
DbU	doDesign.py	/^from   coriolis.Hurricane  import DbU, Breakpoint$/;"	i
DbU	old_doDesign.py	/^from   coriolis.Hurricane  import DbU, Breakpoint$/;"	i
ENABLE_COUNTERS	picorv32.v	/^	parameter [ 0:0] ENABLE_COUNTERS = 1,$/;"	c
ENABLE_FAST_MUL	picorv32.v	/^	parameter [ 0:0] ENABLE_FAST_MUL = 0,$/;"	c
ENABLE_IRQ	picorv32.v	/^	parameter [ 0:0] ENABLE_IRQ = 0,$/;"	c
ENABLE_IRQ_TIMER	picorv32.v	/^	parameter [ 0:0] ENABLE_IRQ_TIMER = 1,$/;"	c
ENABLE_PCPI	picorv32.v	/^	parameter [ 0:0] ENABLE_PCPI = 0,$/;"	c
ENABLE_REGS_16_31	picorv32.v	/^	parameter [ 0:0] ENABLE_REGS_16_31 = 1,$/;"	c
ErrorMessage	doDesign.py	/^from   coriolis.helpers.io import ErrorMessage, WarningMessage, catch$/;"	i
ErrorMessage	old_doDesign.py	/^from   coriolis.helpers.io import ErrorMessage, WarningMessage, catch$/;"	i
FETCH	cpu.v	/^    FETCH  = 6'd13, \/\/ fetch next opcode, and perform prev ALU op$/;"	c
FETCH	cpu_syncreset.v	/^    FETCH  = 6'd13, \/\/ fetch next opcode, and perform prev ALU op$/;"	c
FORMAL_KEEP	picorv32.v	/^    `define FORMAL_KEEP (* keep *)$/;"	c
FORMAL_KEEP	picorv32.v	/^    `define FORMAL_KEEP$/;"	c
FORMAL_KEEP	picorv32.v	/^  `define FORMAL_KEEP (* keep *)$/;"	c
GaugeConf	doDesign.py	/^from   coriolis.plugins.block.configuration import IoPin, GaugeConf$/;"	i
GaugeConf	old_doDesign.py	/^from   coriolis.plugins.block.configuration import IoPin, GaugeConf$/;"	i
HC	ALU.v	/^	output HC;$/;"	p
HC	ALU.v	/^reg HC;$/;"	r
HC	cpu.v	/^wire HC;                \/\/ ALU half carry$/;"	n
HC	cpu_syncreset.v	/^wire HC;                \/\/ ALU half carry$/;"	n
HC9	ALU.v	/^wire HC9 = BCD & (temp_l[3:1] >= 3'd5);$/;"	n
I	cpu.v	/^reg  I = 0;             \/\/ interrupt flag$/;"	r
I	cpu_syncreset.v	/^reg  I = 0;             \/\/ interrupt flag$/;"	r
INDX0	cpu.v	/^    INDX0  = 6'd14, \/\/ (ZP,X)  - fetch ZP address, and send to ALU (+X)$/;"	c
INDX0	cpu_syncreset.v	/^    INDX0  = 6'd14, \/\/ (ZP,X)  - fetch ZP address, and send to ALU (+X)$/;"	c
INDX1	cpu.v	/^    INDX1  = 6'd15, \/\/ (ZP,X)  - fetch LSB at ZP+X, calculate ZP+X+1$/;"	c
INDX1	cpu_syncreset.v	/^    INDX1  = 6'd15, \/\/ (ZP,X)  - fetch LSB at ZP+X, calculate ZP+X+1$/;"	c
INDX2	cpu.v	/^    INDX2  = 6'd16, \/\/ (ZP,X)  - fetch MSB at ZP+X+1$/;"	c
INDX2	cpu_syncreset.v	/^    INDX2  = 6'd16, \/\/ (ZP,X)  - fetch MSB at ZP+X+1$/;"	c
INDX3	cpu.v	/^    INDX3  = 6'd17, \/\/ (ZP,X)  - fetch data $/;"	c
INDX3	cpu_syncreset.v	/^    INDX3  = 6'd17, \/\/ (ZP,X)  - fetch data $/;"	c
INDY0	cpu.v	/^    INDY0  = 6'd18, \/\/ (ZP),Y  - fetch ZP address, and send ZP to ALU (+1)$/;"	c
INDY0	cpu_syncreset.v	/^    INDY0  = 6'd18, \/\/ (ZP),Y  - fetch ZP address, and send ZP to ALU (+1)$/;"	c
INDY1	cpu.v	/^    INDY1  = 6'd19, \/\/ (ZP),Y  - fetch at ZP+1, and send LSB to ALU (+Y) $/;"	c
INDY1	cpu_syncreset.v	/^    INDY1  = 6'd19, \/\/ (ZP),Y  - fetch at ZP+1, and send LSB to ALU (+Y) $/;"	c
INDY2	cpu.v	/^    INDY2  = 6'd20, \/\/ (ZP),Y  - fetch data, and send MSB to ALU (+Carry)$/;"	c
INDY2	cpu_syncreset.v	/^    INDY2  = 6'd20, \/\/ (ZP),Y  - fetch data, and send MSB to ALU (+Carry)$/;"	c
INDY3	cpu.v	/^    INDY3  = 6'd21, \/\/ (ZP),Y) - fetch data (if page boundary crossed)$/;"	c
INDY3	cpu_syncreset.v	/^    INDY3  = 6'd21, \/\/ (ZP),Y) - fetch data (if page boundary crossed)$/;"	c
IR	cpu.v	/^wire [7:0] IR;          \/\/ Instruction register$/;"	n
IR	cpu_syncreset.v	/^wire [7:0] IR;          \/\/ Instruction register$/;"	n
IRHOLD	cpu.v	/^reg  [7:0] IRHOLD;      \/\/ Hold for Instruction register $/;"	r
IRHOLD	cpu_syncreset.v	/^reg  [7:0] IRHOLD;      \/\/ Hold for Instruction register $/;"	r
IRHOLD_valid	cpu.v	/^reg  IRHOLD_valid;      \/\/ Valid instruction in IRHOLD$/;"	r
IRHOLD_valid	cpu_syncreset.v	/^reg  IRHOLD_valid;      \/\/ Valid instruction in IRHOLD$/;"	r
IRQ	Arlet6502.v	/^input IRQ;              \/\/ interrupt request$/;"	p
IRQ	arlet6502.v	/^input IRQ;              \/\/ interrupt request$/;"	p
IRQ	cpu.v	/^input IRQ;              \/\/ interrupt request$/;"	p
IRQ	cpu_syncreset.v	/^input IRQ;              \/\/ interrupt request$/;"	p
IoPin	doDesign.py	/^from   coriolis.plugins.block.configuration import IoPin, GaugeConf$/;"	i
IoPin	old_doDesign.py	/^from   coriolis.plugins.block.configuration import IoPin, GaugeConf$/;"	i
JMP0	cpu.v	/^    JMP0   = 6'd22, \/\/ JMP     - fetch PCL and hold$/;"	c
JMP0	cpu_syncreset.v	/^    JMP0   = 6'd22, \/\/ JMP     - fetch PCL and hold$/;"	c
JMP1	cpu.v	/^    JMP1   = 6'd23, \/\/ JMP     - fetch PCH$/;"	c
JMP1	cpu_syncreset.v	/^    JMP1   = 6'd23, \/\/ JMP     - fetch PCH$/;"	c
JMPI0	cpu.v	/^    JMPI0  = 6'd24, \/\/ JMP IND - fetch LSB and send to ALU for delay (+0)$/;"	c
JMPI0	cpu_syncreset.v	/^    JMPI0  = 6'd24, \/\/ JMP IND - fetch LSB and send to ALU for delay (+0)$/;"	c
JMPI1	cpu.v	/^    JMPI1  = 6'd25, \/\/ JMP IND - fetch MSB, proceed with JMP0 state$/;"	c
JMPI1	cpu_syncreset.v	/^    JMPI1  = 6'd25, \/\/ JMP IND - fetch MSB, proceed with JMP0 state$/;"	c
JSR0	cpu.v	/^    JSR0   = 6'd26, \/\/ JSR     - push PCH, save LSB, send S to ALU (-1)$/;"	c
JSR0	cpu_syncreset.v	/^    JSR0   = 6'd26, \/\/ JSR     - push PCH, save LSB, send S to ALU (-1)$/;"	c
JSR1	cpu.v	/^    JSR1   = 6'd27, \/\/ JSR     - push PCL, send S to ALU (-1)$/;"	c
JSR1	cpu_syncreset.v	/^    JSR1   = 6'd27, \/\/ JSR     - push PCL, send S to ALU (-1)$/;"	c
JSR2	cpu.v	/^    JSR2   = 6'd28, \/\/ JSR     - write S$/;"	c
JSR2	cpu_syncreset.v	/^    JSR2   = 6'd28, \/\/ JSR     - write S$/;"	c
JSR3	cpu.v	/^    JSR3   = 6'd29, \/\/ JSR     - fetch MSB$/;"	c
JSR3	cpu_syncreset.v	/^    JSR3   = 6'd29, \/\/ JSR     - fetch MSB$/;"	c
LATCHED_IRQ	picorv32.v	/^	parameter [31:0] LATCHED_IRQ = 32'h ffff_ffff,$/;"	c
LATCHED_MEM_RDATA	picorv32.v	/^	parameter [ 0:0] LATCHED_MEM_RDATA = 0,$/;"	c
N	ALU.v	/^	output N;$/;"	p
N	ALU.v	/^reg N;$/;"	r
N	cpu.v	/^reg  N = 0;             \/\/ negative flag$/;"	r
N	cpu_syncreset.v	/^reg  N = 0;             \/\/ negative flag$/;"	r
NMI	Arlet6502.v	/^input NMI;              \/\/ non-maskable interrupt request$/;"	p
NMI	arlet6502.v	/^input NMI;              \/\/ non-maskable interrupt request$/;"	p
NMI	cpu.v	/^input NMI;              \/\/ non-maskable interrupt request$/;"	p
NMI	cpu_syncreset.v	/^input NMI;              \/\/ non-maskable interrupt request$/;"	p
NMI_1	cpu.v	/^reg NMI_1 = 0;          \/\/ delayed NMI signal$/;"	r
NMI_1	cpu_syncreset.v	/^reg NMI_1 = 0;          \/\/ delayed NMI signal$/;"	r
NMI_edge	cpu.v	/^reg NMI_edge = 0;       \/\/ captured NMI edge$/;"	r
NMI_edge	cpu_syncreset.v	/^reg NMI_edge = 0;       \/\/ captured NMI edge$/;"	r
OP_A	cpu.v	/^        OP_A   = 4'b1111;$/;"	c
OP_A	cpu_syncreset.v	/^        OP_A   = 4'b1111;$/;"	c
OP_ADD	cpu.v	/^        OP_ADD = 4'b0011,$/;"	c
OP_ADD	cpu_syncreset.v	/^        OP_ADD = 4'b0011,$/;"	c
OP_AND	cpu.v	/^        OP_AND = 4'b1101,$/;"	c
OP_AND	cpu_syncreset.v	/^        OP_AND = 4'b1101,$/;"	c
OP_EOR	cpu.v	/^        OP_EOR = 4'b1110,$/;"	c
OP_EOR	cpu_syncreset.v	/^        OP_EOR = 4'b1110,$/;"	c
OP_OR	cpu.v	/^        OP_OR  = 4'b1100,$/;"	c
OP_OR	cpu_syncreset.v	/^        OP_OR  = 4'b1100,$/;"	c
OP_ROL	cpu.v	/^        OP_ROL = 4'b1011,$/;"	c
OP_ROL	cpu_syncreset.v	/^        OP_ROL = 4'b1011,$/;"	c
OP_SUB	cpu.v	/^        OP_SUB = 4'b0111,$/;"	c
OP_SUB	cpu_syncreset.v	/^        OP_SUB = 4'b0111,$/;"	c
OUT	ALU.v	/^	output [7:0] OUT;$/;"	p
OUT	ALU.v	/^reg [7:0] OUT;$/;"	r
P	cpu.v	/^wire [7:0] P = { N, V, 2'b11, D, I, Z, C };$/;"	n
P	cpu_syncreset.v	/^wire [7:0] P = { N, V, 2'b11, D, I, Z, C };$/;"	n
PC	cpu.v	/^reg  [15:0] PC;         \/\/ Program Counter $/;"	r
PC	cpu_syncreset.v	/^reg  [15:0] PC;         \/\/ Program Counter $/;"	r
PCH	cpu.v	/^wire [7:0] PCH = PC[15:8];$/;"	n
PCH	cpu_syncreset.v	/^wire [7:0] PCH = PC[15:8];$/;"	n
PCL	cpu.v	/^wire [7:0] PCL = PC[7:0];$/;"	n
PCL	cpu_syncreset.v	/^wire [7:0] PCL = PC[7:0];$/;"	n
PC_inc	cpu.v	/^reg PC_inc;             \/\/ Increment PC$/;"	r
PC_inc	cpu_syncreset.v	/^reg PC_inc;             \/\/ Increment PC$/;"	r
PC_temp	cpu.v	/^reg [15:0] PC_temp;     \/\/ intermediate value of PC $/;"	r
PC_temp	cpu_syncreset.v	/^reg [15:0] PC_temp;     \/\/ intermediate value of PC $/;"	r
PICORV32_V	picorv32.v	/^`define PICORV32_V$/;"	c
PROGADDR_IRQ	picorv32.v	/^	parameter [31:0] PROGADDR_IRQ = 32'h 0000_0010,$/;"	c
PULL0	cpu.v	/^    PULL0  = 6'd30, \/\/ PLP\/PLA - save next op in IRHOLD, send S to ALU (+1)$/;"	c
PULL0	cpu_syncreset.v	/^    PULL0  = 6'd30, \/\/ PLP\/PLA - save next op in IRHOLD, send S to ALU (+1)$/;"	c
PULL1	cpu.v	/^    PULL1  = 6'd31, \/\/ PLP\/PLA - fetch data from stack, write S$/;"	c
PULL1	cpu_syncreset.v	/^    PULL1  = 6'd31, \/\/ PLP\/PLA - fetch data from stack, write S$/;"	c
PULL2	cpu.v	/^    PULL2  = 6'd32, \/\/ PLP\/PLA - prefetch op, but don't increment PC$/;"	c
PULL2	cpu_syncreset.v	/^    PULL2  = 6'd32, \/\/ PLP\/PLA - prefetch op, but don't increment PC$/;"	c
PUSH0	cpu.v	/^    PUSH0  = 6'd33, \/\/ PHP\/PHA - send A to ALU (+0)$/;"	c
PUSH0	cpu_syncreset.v	/^    PUSH0  = 6'd33, \/\/ PHP\/PHA - send A to ALU (+0)$/;"	c
PUSH1	cpu.v	/^    PUSH1  = 6'd34, \/\/ PHP\/PHA - write A\/P, send S to ALU (-1)$/;"	c
PUSH1	cpu_syncreset.v	/^    PUSH1  = 6'd34, \/\/ PHP\/PHA - write A\/P, send S to ALU (-1)$/;"	c
PnR	dodo.py	/^from coriolis.designflow.pnr      import PnR$/;"	i
RDY	ALU.v	/^	input RDY;$/;"	p
RDY	Arlet6502.v	/^input RDY;              \/\/ Ready signal. Pauses CPU when RDY=0 $/;"	p
RDY	arlet6502.v	/^input RDY;              \/\/ Ready signal. Pauses CPU when RDY=0 $/;"	p
RDY	cpu.v	/^input RDY;              \/\/ Ready signal. Pauses CPU when RDY=0 $/;"	p
RDY	cpu_syncreset.v	/^input RDY;              \/\/ Ready signal. Pauses CPU when RDY=0 $/;"	p
READ	cpu.v	/^    READ   = 6'd35, \/\/ Read memory for read\/modify\/write (INC, DEC, shift)$/;"	c
READ	cpu_syncreset.v	/^    READ   = 6'd35, \/\/ Read memory for read\/modify\/write (INC, DEC, shift)$/;"	c
REG	cpu.v	/^    REG    = 6'd36, \/\/ Read register for reg-reg transfers$/;"	c
REG	cpu_syncreset.v	/^    REG    = 6'd36, \/\/ Read register for reg-reg transfers$/;"	c
REGS_INIT_ZERO	picorv32.v	/^	parameter [ 0:0] REGS_INIT_ZERO = 0,$/;"	c
RTI0	cpu.v	/^    RTI0   = 6'd37, \/\/ RTI     - send S to ALU (+1)$/;"	c
RTI0	cpu_syncreset.v	/^    RTI0   = 6'd37, \/\/ RTI     - send S to ALU (+1)$/;"	c
RTI1	cpu.v	/^    RTI1   = 6'd38, \/\/ RTI     - read P from stack $/;"	c
RTI1	cpu_syncreset.v	/^    RTI1   = 6'd38, \/\/ RTI     - read P from stack $/;"	c
RTI2	cpu.v	/^    RTI2   = 6'd39, \/\/ RTI     - read PCL from stack$/;"	c
RTI2	cpu_syncreset.v	/^    RTI2   = 6'd39, \/\/ RTI     - read PCL from stack$/;"	c
RTI3	cpu.v	/^    RTI3   = 6'd40, \/\/ RTI     - read PCH from stack$/;"	c
RTI3	cpu_syncreset.v	/^    RTI3   = 6'd40, \/\/ RTI     - read PCH from stack$/;"	c
RTI4	cpu.v	/^    RTI4   = 6'd41, \/\/ RTI     - read PCH from stack$/;"	c
RTI4	cpu_syncreset.v	/^    RTI4   = 6'd41, \/\/ RTI     - read PCH from stack$/;"	c
RTS0	cpu.v	/^    RTS0   = 6'd42, \/\/ RTS     - send S to ALU (+1)$/;"	c
RTS0	cpu_syncreset.v	/^    RTS0   = 6'd42, \/\/ RTS     - send S to ALU (+1)$/;"	c
RTS1	cpu.v	/^    RTS1   = 6'd43, \/\/ RTS     - read PCL from stack $/;"	c
RTS1	cpu_syncreset.v	/^    RTS1   = 6'd43, \/\/ RTS     - read PCL from stack $/;"	c
RTS2	cpu.v	/^    RTS2   = 6'd44, \/\/ RTS     - write PCL to ALU, read PCH $/;"	c
RTS2	cpu_syncreset.v	/^    RTS2   = 6'd44, \/\/ RTS     - write PCL to ALU, read PCH $/;"	c
RTS3	cpu.v	/^    RTS3   = 6'd45, \/\/ RTS     - load PC and increment$/;"	c
RTS3	cpu_syncreset.v	/^    RTS3   = 6'd45, \/\/ RTS     - load PC and increment$/;"	c
S	cpu.v	/^wire [7:0]   S = AXYS[SEL_S];           \/\/ Stack pointer $/;"	n
S	cpu_syncreset.v	/^wire [7:0]   S = AXYS[SEL_S];           \/\/ Stack pointer $/;"	n
S2R	dodo.py	/^from coriolis.designflow.s2r      import S2R$/;"	i
SEL_A	cpu.v	/^        SEL_A    = 2'd0,$/;"	c
SEL_A	cpu_syncreset.v	/^        SEL_A    = 2'd0,$/;"	c
SEL_S	cpu.v	/^        SEL_S    = 2'd1,$/;"	c
SEL_S	cpu_syncreset.v	/^        SEL_S    = 2'd1,$/;"	c
SEL_X	cpu.v	/^        SEL_X    = 2'd2, $/;"	c
SEL_X	cpu_syncreset.v	/^        SEL_X    = 2'd2, $/;"	c
SEL_Y	cpu.v	/^        SEL_Y    = 2'd3;$/;"	c
SEL_Y	cpu_syncreset.v	/^        SEL_Y    = 2'd3;$/;"	c
STACKPAGE	cpu.v	/^        STACKPAGE = 8'h01;$/;"	c
STACKPAGE	cpu_syncreset.v	/^        STACKPAGE = 8'h01;$/;"	c
Spares	doDesign.py	/^from   coriolis.plugins.block.spares        import Spares$/;"	i
Spares	old_doDesign.py	/^from   coriolis.plugins.block.spares        import Spares$/;"	i
TWO_CYCLE_ALU	picorv32.v	/^	parameter [ 0:0] TWO_CYCLE_ALU = 0,$/;"	c
V	ALU.v	/^	output V;$/;"	p
V	ALU.v	/^wire V;$/;"	n
V	cpu.v	/^reg  V = 0;             \/\/ overflow flag$/;"	r
V	cpu.v	/^wire [7:0] P = { N, V, 2'b11, D, I, Z, C };$/;"	n
V	cpu_syncreset.v	/^reg  V = 0;             \/\/ overflow flag$/;"	r
V	cpu_syncreset.v	/^wire [7:0] P = { N, V, 2'b11, D, I, Z, C };$/;"	n
WE	Arlet6502.v	/^output WE;              \/\/ write enable$/;"	p
WE	arlet6502.v	/^output WE;              \/\/ write enable$/;"	p
WE	cpu.v	/^output WE;              \/\/ write enable$/;"	p
WE	cpu.v	/^reg  WE;                \/\/ Write Enable$/;"	r
WE	cpu_syncreset.v	/^output WE;              \/\/ write enable$/;"	p
WE	cpu_syncreset.v	/^reg  WE;                \/\/ Write Enable$/;"	r
WRITE	cpu.v	/^    WRITE  = 6'd46, \/\/ Write memory for read\/modify\/write $/;"	c
WRITE	cpu_syncreset.v	/^    WRITE  = 6'd46, \/\/ Write memory for read\/modify\/write $/;"	c
WarningMessage	doDesign.py	/^from   coriolis.helpers.io import ErrorMessage, WarningMessage, catch$/;"	i
WarningMessage	old_doDesign.py	/^from   coriolis.helpers.io import ErrorMessage, WarningMessage, catch$/;"	i
X	cpu.v	/^wire [7:0]   X = AXYS[SEL_X];           \/\/ X register$/;"	n
X	cpu_syncreset.v	/^wire [7:0]   X = AXYS[SEL_X];           \/\/ X register$/;"	n
Y	cpu.v	/^wire [7:0]   Y = AXYS[SEL_Y];           \/\/ Y register $/;"	n
Y	cpu_syncreset.v	/^wire [7:0]   Y = AXYS[SEL_Y];           \/\/ Y register $/;"	n
Yosys	dodo.py	/^from coriolis.designflow.yosys    import Yosys$/;"	i
Z	ALU.v	/^	output Z;$/;"	p
Z	ALU.v	/^wire Z;$/;"	n
Z	cpu.v	/^reg  Z = 0;             \/\/ zero flag$/;"	r
Z	cpu_syncreset.v	/^reg  Z = 0;             \/\/ zero flag$/;"	r
ZEROPAGE	cpu.v	/^        ZEROPAGE  = 8'h00,$/;"	c
ZEROPAGE	cpu_syncreset.v	/^        ZEROPAGE  = 8'h00,$/;"	c
ZP0	cpu.v	/^    ZP0    = 6'd47, \/\/ Z-page  - fetch ZP address$/;"	c
ZP0	cpu_syncreset.v	/^    ZP0    = 6'd47, \/\/ Z-page  - fetch ZP address$/;"	c
ZPX0	cpu.v	/^    ZPX0   = 6'd48, \/\/ ZP, X   - fetch ZP, and send to ALU (+X)$/;"	c
ZPX0	cpu_syncreset.v	/^    ZPX0   = 6'd48, \/\/ ZP, X   - fetch ZP, and send to ALU (+X)$/;"	c
ZPX1	cpu.v	/^    ZPX1   = 6'd49; \/\/ ZP, X   - load from memory$/;"	c
ZPX1	cpu_syncreset.v	/^    ZPX1   = 6'd49; \/\/ ZP, X   - load from memory$/;"	c
accumulator	mac.v	/^  reg [7:0] accumulator;$/;"	r
adc_bcd	cpu.v	/^reg adc_bcd;            \/\/ ALU should do BCD style carry $/;"	r
adc_bcd	cpu_syncreset.v	/^reg adc_bcd;            \/\/ ALU should do BCD style carry $/;"	r
adc_sbc	cpu.v	/^reg adc_sbc;            \/\/ doing ADC\/SBC$/;"	r
adc_sbc	cpu_syncreset.v	/^reg adc_sbc;            \/\/ doing ADC\/SBC$/;"	r
adder_CI	ALU.v	/^wire adder_CI = (right | (op[3:2] == 2'b11)) ? 0 : CI;$/;"	n
adj_bcd	cpu.v	/^reg adj_bcd;            \/\/ results should be BCD adjusted$/;"	r
adj_bcd	cpu_syncreset.v	/^reg adj_bcd;            \/\/ results should be BCD adjusted$/;"	r
af	doDesign.py	/^af = CRL.AllianceFramework.get()$/;"	v
af	old_doDesign.py	/^af = CRL.AllianceFramework.get()$/;"	v
alu_add_sub	picorv32.v	/^	reg [31:0] alu_add_sub;$/;"	r
alu_eq	picorv32.v	/^	reg alu_eq, alu_ltu, alu_lts;$/;"	r
alu_lts	picorv32.v	/^	reg alu_eq, alu_ltu, alu_lts;$/;"	r
alu_ltu	picorv32.v	/^	reg alu_eq, alu_ltu, alu_lts;$/;"	r
alu_op	cpu.v	/^reg [3:0] alu_op;       \/\/ Current cycle ALU operation $/;"	r
alu_op	cpu_syncreset.v	/^reg [3:0] alu_op;       \/\/ Current cycle ALU operation $/;"	r
alu_out	picorv32.v	/^	reg [31:0] alu_out, alu_out_q;$/;"	r
alu_out_0	picorv32.v	/^	reg alu_out_0, alu_out_0_q;$/;"	r
alu_out_0_q	picorv32.v	/^	reg alu_out_0, alu_out_0_q;$/;"	r
alu_out_q	picorv32.v	/^	reg [31:0] alu_out, alu_out_q;$/;"	r
alu_shift_right	cpu.v	/^reg alu_shift_right;    \/\/ Current cycle shift right enable$/;"	r
alu_shift_right	cpu_syncreset.v	/^reg alu_shift_right;    \/\/ Current cycle shift right enable$/;"	r
alu_shl	picorv32.v	/^	reg [31:0] alu_shl, alu_shr;$/;"	r
alu_shr	picorv32.v	/^	reg [31:0] alu_shl, alu_shr;$/;"	r
alu_wait	picorv32.v	/^	reg alu_wait, alu_wait_2;$/;"	r
alu_wait_2	picorv32.v	/^	reg alu_wait, alu_wait_2;$/;"	r
argparse	connectors_placement.py	/^import argparse$/;"	i
argparse	set_hitas_environement.py	/^import argparse$/;"	i
arlet6502	arlet6502.v	/^module arlet6502 (clk, reset, A, DI, DO, WE, IRQ, NMI, RDY);$/;"	m
assert	picorv32.v	/^  `define assert(assert_expr) assert(assert_expr)$/;"	c
assert	picorv32.v	/^  `define assert(assert_expr) empty_statement$/;"	c
backwards	cpu.v	/^reg backwards;          \/\/ backwards branch$/;"	r
backwards	cpu_syncreset.v	/^reg backwards;          \/\/ backwards branch$/;"	r
bit_ins	cpu.v	/^reg bit_ins;            \/\/ doing BIT instruction$/;"	r
bit_ins	cpu_syncreset.v	/^reg bit_ins;            \/\/ doing BIT instruction$/;"	r
brk	cpu.v	/^reg brk;                \/\/ doing BRK$/;"	r
brk	cpu_syncreset.v	/^reg brk;                \/\/ doing BRK$/;"	r
cached_ascii_instr	picorv32.v	/^	reg [63:0] cached_ascii_instr;$/;"	r
cached_insn_imm	picorv32.v	/^	reg [31:0] cached_insn_imm;$/;"	r
cached_insn_opcode	picorv32.v	/^	reg [31:0] cached_insn_opcode;$/;"	r
cached_insn_rd	picorv32.v	/^	reg [4:0] cached_insn_rd;$/;"	r
cached_insn_rs1	picorv32.v	/^	reg [4:0] cached_insn_rs1;$/;"	r
cached_insn_rs2	picorv32.v	/^	reg [4:0] cached_insn_rs2;$/;"	r
catch	doDesign.py	/^from   coriolis.helpers.io import ErrorMessage, WarningMessage, catch$/;"	i
catch	old_doDesign.py	/^from   coriolis.helpers.io import ErrorMessage, WarningMessage, catch$/;"	i
clc	cpu.v	/^reg clc;                \/\/ clear carry$/;"	r
clc	cpu_syncreset.v	/^reg clc;                \/\/ clear carry$/;"	r
cld	cpu.v	/^reg cld;                \/\/ clear decimal$/;"	r
cld	cpu_syncreset.v	/^reg cld;                \/\/ clear decimal$/;"	r
clear_prefetched_high_word	picorv32.v	/^	reg clear_prefetched_high_word;$/;"	r
clear_prefetched_high_word_q	picorv32.v	/^	reg clear_prefetched_high_word_q;$/;"	r
cli	cpu.v	/^reg cli;                \/\/ clear interrupt$/;"	r
cli	cpu_syncreset.v	/^reg cli;                \/\/ clear interrupt$/;"	r
clk	ALU.v	/^	input clk;$/;"	p
clk	Arlet6502.v	/^input clk;              \/\/ CPU clock $/;"	p
clk	arlet6502.v	/^input clk;              \/\/ CPU clock $/;"	p
clk	cpu.v	/^input clk;              \/\/ CPU clock $/;"	p
clk	cpu_syncreset.v	/^input clk;              \/\/ CPU clock $/;"	p
clk	picorv32.v	/^	input clk, resetn,$/;"	p
clv	cpu.v	/^reg clv;                \/\/ clear overflow $/;"	r
clv	cpu_syncreset.v	/^reg clv;                \/\/ clear overflow $/;"	r
combinational	doDesign.py	/^combinational =0$/;"	v
compare	cpu.v	/^reg compare;            \/\/ doing CMP\/CPY\/CPX$/;"	r
compare	cpu_syncreset.v	/^reg compare;            \/\/ doing CMP\/CPY\/CPX$/;"	r
compressed_instr	picorv32.v	/^	reg compressed_instr;$/;"	r
cond_code	cpu.v	/^reg [2:0] cond_code;    \/\/ condition code bits from instruction$/;"	r
cond_code	cpu_syncreset.v	/^reg [2:0] cond_code;    \/\/ condition code bits from instruction$/;"	r
cond_true	cpu.v	/^reg cond_true;          \/\/ branch condition is true$/;"	r
cond_true	cpu_syncreset.v	/^reg cond_true;          \/\/ branch condition is true$/;"	r
connectors_number_per_side	connectors_placement.py	/^def connectors_number_per_side(horizontal_size,vertical_size,horizontal_pitch,vertical_pitch,N):$/;"	f
count_cycle	picorv32.v	/^	reg [63:0] count_cycle, count_instr;$/;"	r
count_instr	picorv32.v	/^	reg [63:0] count_cycle, count_instr;$/;"	r
cpu	cpu.v	/^module cpu( clk, reset, AB, DI, DO, WE, IRQ, NMI, RDY );$/;"	m
cpu	cpu_syncreset.v	/^module cpu( clk, reset, AB, DI, DO, WE, IRQ, NMI, RDY );$/;"	m
cpu_state	picorv32.v	/^	reg [7:0] cpu_state;$/;"	r
cpuregs	picorv32.v	/^	reg [31:0] cpuregs [0:regfile_size-1];$/;"	r
cpuregs_raddr1	picorv32.v	/^	wire [5:0] cpuregs_raddr1 = ENABLE_REGS_DUALPORT ? decoded_rs1 : decoded_rs;$/;"	n
cpuregs_raddr2	picorv32.v	/^	wire [5:0] cpuregs_raddr2 = ENABLE_REGS_DUALPORT ? decoded_rs2 : 0;$/;"	n
cpuregs_rdata1	picorv32.v	/^	wire[31:0] cpuregs_rdata1;$/;"	n
cpuregs_rdata2	picorv32.v	/^	wire[31:0] cpuregs_rdata2;$/;"	n
cpuregs_rs1	picorv32.v	/^	reg [31:0] cpuregs_rs1;$/;"	r
cpuregs_rs2	picorv32.v	/^	reg [31:0] cpuregs_rs2;$/;"	r
cpuregs_waddr	picorv32.v	/^	wire [5:0] cpuregs_waddr = latched_rd;$/;"	n
cpuregs_wrdata	picorv32.v	/^	reg [31:0] cpuregs_wrdata;$/;"	r
cpuregs_write	picorv32.v	/^	reg cpuregs_write;$/;"	r
current_pc	picorv32.v	/^	reg [31:0] current_pc;$/;"	r
datetime	connectors_placement.py	/^import datetime$/;"	i
datetime	set_hitas_environement.py	/^import datetime$/;"	i
dbg_insn_addr	picorv32.v	/^	reg [31:0] dbg_insn_addr;$/;"	r
dbg_insn_opcode	picorv32.v	/^	reg [31:0] dbg_insn_opcode;$/;"	r
dbg_irq_call	picorv32.v	/^	reg dbg_irq_call;$/;"	r
dbg_irq_enter	picorv32.v	/^	reg dbg_irq_enter;$/;"	r
dbg_irq_ret	picorv32.v	/^	reg [31:0] dbg_irq_ret;$/;"	r
dbg_mem_addr	picorv32.v	/^	wire [31:0] dbg_mem_addr  = mem_addr;$/;"	n
dbg_mem_instr	picorv32.v	/^	wire dbg_mem_instr = mem_instr;$/;"	n
dbg_mem_rdata	picorv32.v	/^	wire [31:0] dbg_mem_rdata = mem_rdata;$/;"	n
dbg_mem_ready	picorv32.v	/^	wire dbg_mem_ready = mem_ready;$/;"	n
dbg_mem_valid	picorv32.v	/^	wire dbg_mem_valid = mem_valid;$/;"	n
dbg_mem_wdata	picorv32.v	/^	wire [31:0] dbg_mem_wdata = mem_wdata;$/;"	n
dbg_mem_wstrb	picorv32.v	/^	wire [ 3:0] dbg_mem_wstrb = mem_wstrb;$/;"	n
dbg_next	picorv32.v	/^	reg dbg_next;$/;"	r
dbg_reg_x0	picorv32.v	/^	wire [31:0] dbg_reg_x0  = 0;$/;"	n
dbg_reg_x1	picorv32.v	/^	wire [31:0] dbg_reg_x1  = cpuregs[1];$/;"	n
dbg_reg_x10	picorv32.v	/^	wire [31:0] dbg_reg_x10 = cpuregs[10];$/;"	n
dbg_reg_x11	picorv32.v	/^	wire [31:0] dbg_reg_x11 = cpuregs[11];$/;"	n
dbg_reg_x12	picorv32.v	/^	wire [31:0] dbg_reg_x12 = cpuregs[12];$/;"	n
dbg_reg_x13	picorv32.v	/^	wire [31:0] dbg_reg_x13 = cpuregs[13];$/;"	n
dbg_reg_x14	picorv32.v	/^	wire [31:0] dbg_reg_x14 = cpuregs[14];$/;"	n
dbg_reg_x15	picorv32.v	/^	wire [31:0] dbg_reg_x15 = cpuregs[15];$/;"	n
dbg_reg_x16	picorv32.v	/^	wire [31:0] dbg_reg_x16 = cpuregs[16];$/;"	n
dbg_reg_x17	picorv32.v	/^	wire [31:0] dbg_reg_x17 = cpuregs[17];$/;"	n
dbg_reg_x18	picorv32.v	/^	wire [31:0] dbg_reg_x18 = cpuregs[18];$/;"	n
dbg_reg_x19	picorv32.v	/^	wire [31:0] dbg_reg_x19 = cpuregs[19];$/;"	n
dbg_reg_x2	picorv32.v	/^	wire [31:0] dbg_reg_x2  = cpuregs[2];$/;"	n
dbg_reg_x20	picorv32.v	/^	wire [31:0] dbg_reg_x20 = cpuregs[20];$/;"	n
dbg_reg_x21	picorv32.v	/^	wire [31:0] dbg_reg_x21 = cpuregs[21];$/;"	n
dbg_reg_x22	picorv32.v	/^	wire [31:0] dbg_reg_x22 = cpuregs[22];$/;"	n
dbg_reg_x23	picorv32.v	/^	wire [31:0] dbg_reg_x23 = cpuregs[23];$/;"	n
dbg_reg_x24	picorv32.v	/^	wire [31:0] dbg_reg_x24 = cpuregs[24];$/;"	n
dbg_reg_x25	picorv32.v	/^	wire [31:0] dbg_reg_x25 = cpuregs[25];$/;"	n
dbg_reg_x26	picorv32.v	/^	wire [31:0] dbg_reg_x26 = cpuregs[26];$/;"	n
dbg_reg_x27	picorv32.v	/^	wire [31:0] dbg_reg_x27 = cpuregs[27];$/;"	n
dbg_reg_x28	picorv32.v	/^	wire [31:0] dbg_reg_x28 = cpuregs[28];$/;"	n
dbg_reg_x29	picorv32.v	/^	wire [31:0] dbg_reg_x29 = cpuregs[29];$/;"	n
dbg_reg_x3	picorv32.v	/^	wire [31:0] dbg_reg_x3  = cpuregs[3];$/;"	n
dbg_reg_x30	picorv32.v	/^	wire [31:0] dbg_reg_x30 = cpuregs[30];$/;"	n
dbg_reg_x31	picorv32.v	/^	wire [31:0] dbg_reg_x31 = cpuregs[31];$/;"	n
dbg_reg_x4	picorv32.v	/^	wire [31:0] dbg_reg_x4  = cpuregs[4];$/;"	n
dbg_reg_x5	picorv32.v	/^	wire [31:0] dbg_reg_x5  = cpuregs[5];$/;"	n
dbg_reg_x6	picorv32.v	/^	wire [31:0] dbg_reg_x6  = cpuregs[6];$/;"	n
dbg_reg_x7	picorv32.v	/^	wire [31:0] dbg_reg_x7  = cpuregs[7];$/;"	n
dbg_reg_x8	picorv32.v	/^	wire [31:0] dbg_reg_x8  = cpuregs[8];$/;"	n
dbg_reg_x9	picorv32.v	/^	wire [31:0] dbg_reg_x9  = cpuregs[9];$/;"	n
dbg_valid_insn	picorv32.v	/^	reg dbg_valid_insn;$/;"	r
debug	picorv32.v	/^  `define debug(debug_command) debug_command$/;"	c
debug	picorv32.v	/^  `define debug(debug_command)$/;"	c
decoded_imm	picorv32.v	/^	reg [31:0] decoded_imm, decoded_imm_j;$/;"	r
decoded_imm_j	picorv32.v	/^	reg [31:0] decoded_imm, decoded_imm_j;$/;"	r
decoded_rd	picorv32.v	/^	reg [regindex_bits-1:0] decoded_rd, decoded_rs1, decoded_rs2;$/;"	r
decoded_rs	picorv32.v	/^	reg [regindex_bits-1:0] decoded_rs;$/;"	r
decoded_rs1	picorv32.v	/^	reg [regindex_bits-1:0] decoded_rd, decoded_rs1, decoded_rs2;$/;"	r
decoded_rs2	picorv32.v	/^	reg [regindex_bits-1:0] decoded_rd, decoded_rs1, decoded_rs2;$/;"	r
decoder_pseudo_trigger	picorv32.v	/^	reg decoder_pseudo_trigger;$/;"	r
decoder_pseudo_trigger_q	picorv32.v	/^	reg decoder_pseudo_trigger_q;$/;"	r
decoder_trigger	picorv32.v	/^	reg decoder_trigger;$/;"	r
decoder_trigger_q	picorv32.v	/^	reg decoder_trigger_q;$/;"	r
do_waitirq	picorv32.v	/^	reg do_waitirq;$/;"	r
dst_reg	cpu.v	/^reg [1:0] dst_reg;      \/\/ destination register index$/;"	r
dst_reg	cpu_syncreset.v	/^reg [1:0] dst_reg;      \/\/ destination register index$/;"	r
empty_statement	picorv32.v	/^	task empty_statement;$/;"	t
extract_instance_and_power_pin	set_hitas_environement.py	/^def extract_instance_and_power_pin(spi_file,entity):$/;"	f
generate_db_hitas_file	set_hitas_environement.py	/^def generate_db_hitas_file(entity,model):$/;"	f
generate_doDesign_file	connectors_placement.py	/^def generate_doDesign_file(entity,all_signals,horizontal_area,vertical_area,horizontal_pitch,vertical_pitch,comb,clk_name='clk',reset_name='reset'):$/;"	f
generate_dodo_file	connectors_placement.py	/^def generate_dodo_file(entity,comb):$/;"	f
generate_ioPinsSpec	connectors_placement.py	/^def generate_ioPinsSpec(dico,horizontal_size,vertical_size,horizontal_pitch,vertical_pitch):$/;"	f
generate_ioPinsSpec_list	connectors_placement.py	/^def generate_ioPinsSpec_list(dico,horizontal_size,vertical_size,horizontal_pitch,vertical_pitch):$/;"	f
generate_report_hitas_file	set_hitas_environement.py	/^def generate_report_hitas_file(report_file,entity):$/;"	f
get_signals	connectors_placement.py	/^def get_signals(file,entity):$/;"	f
get_signals_hurricane	connectors_placement.py	/^def get_signals_hurricane(entity):$/;"	f
get_signals_hurricane	doDesign.py	/^def get_signals_hurricane(entity):$/;"	f
glob	connectors_placement.py	/^import glob$/;"	i
glob	set_hitas_environement.py	/^import glob$/;"	i
guessOs	hitas/avt_env.sh	/^ guessOs ()$/;"	f
guessSite	hitas/avt_env.sh	/^ guessSite ()$/;"	f
htree_configuration	connectors_placement.py	/^def htree_configuration(filename,comb,clk_name='clk',reset_name='reset'):$/;"	f
i	picorv32.v	/^	integer i;$/;"	r
inc	cpu.v	/^reg inc;                \/\/ increment$/;"	r
inc	cpu_syncreset.v	/^reg inc;                \/\/ increment$/;"	r
index_y	cpu.v	/^reg index_y;            \/\/ if set, then Y is index reg rather than X $/;"	r
index_y	cpu_syncreset.v	/^reg index_y;            \/\/ if set, then Y is index reg rather than X $/;"	r
input	picorv32.v	/^	input             pcpi_ready,$/;"	p
input	picorv32.v	/^	input      [31:0] pcpi_rd,$/;"	p
instr_add	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_addi	picorv32.v	/^	reg instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai;$/;"	r
instr_and	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_andi	picorv32.v	/^	reg instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai;$/;"	r
instr_auipc	picorv32.v	/^	reg instr_lui, instr_auipc, instr_jal, instr_jalr;$/;"	r
instr_beq	picorv32.v	/^	reg instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu;$/;"	r
instr_bge	picorv32.v	/^	reg instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu;$/;"	r
instr_bgeu	picorv32.v	/^	reg instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu;$/;"	r
instr_blt	picorv32.v	/^	reg instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu;$/;"	r
instr_bltu	picorv32.v	/^	reg instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu;$/;"	r
instr_bne	picorv32.v	/^	reg instr_beq, instr_bne, instr_blt, instr_bge, instr_bltu, instr_bgeu;$/;"	r
instr_ecall_ebreak	picorv32.v	/^	reg instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_fence;$/;"	r
instr_fence	picorv32.v	/^	reg instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_fence;$/;"	r
instr_getq	picorv32.v	/^	reg instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer;$/;"	r
instr_jal	picorv32.v	/^	reg instr_lui, instr_auipc, instr_jal, instr_jalr;$/;"	r
instr_jalr	picorv32.v	/^	reg instr_lui, instr_auipc, instr_jal, instr_jalr;$/;"	r
instr_lb	picorv32.v	/^	reg instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw;$/;"	r
instr_lbu	picorv32.v	/^	reg instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw;$/;"	r
instr_lh	picorv32.v	/^	reg instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw;$/;"	r
instr_lhu	picorv32.v	/^	reg instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw;$/;"	r
instr_lui	picorv32.v	/^	reg instr_lui, instr_auipc, instr_jal, instr_jalr;$/;"	r
instr_lw	picorv32.v	/^	reg instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw;$/;"	r
instr_maskirq	picorv32.v	/^	reg instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer;$/;"	r
instr_or	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_ori	picorv32.v	/^	reg instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai;$/;"	r
instr_rdcycle	picorv32.v	/^	reg instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_fence;$/;"	r
instr_rdcycleh	picorv32.v	/^	reg instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_fence;$/;"	r
instr_rdinstr	picorv32.v	/^	reg instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_fence;$/;"	r
instr_rdinstrh	picorv32.v	/^	reg instr_rdcycle, instr_rdcycleh, instr_rdinstr, instr_rdinstrh, instr_ecall_ebreak, instr_fence;$/;"	r
instr_retirq	picorv32.v	/^	reg instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer;$/;"	r
instr_sb	picorv32.v	/^	reg instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw;$/;"	r
instr_setq	picorv32.v	/^	reg instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer;$/;"	r
instr_sh	picorv32.v	/^	reg instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw;$/;"	r
instr_sll	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_slli	picorv32.v	/^	reg instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai;$/;"	r
instr_slt	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_slti	picorv32.v	/^	reg instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai;$/;"	r
instr_sltiu	picorv32.v	/^	reg instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai;$/;"	r
instr_sltu	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_sra	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_srai	picorv32.v	/^	reg instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai;$/;"	r
instr_srl	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_srli	picorv32.v	/^	reg instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai;$/;"	r
instr_sub	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_sw	picorv32.v	/^	reg instr_lb, instr_lh, instr_lw, instr_lbu, instr_lhu, instr_sb, instr_sh, instr_sw;$/;"	r
instr_timer	picorv32.v	/^	reg instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer;$/;"	r
instr_trap	picorv32.v	/^	wire instr_trap;$/;"	n
instr_waitirq	picorv32.v	/^	reg instr_getq, instr_setq, instr_retirq, instr_maskirq, instr_waitirq, instr_timer;$/;"	r
instr_xor	picorv32.v	/^	reg instr_add, instr_sub, instr_sll, instr_slt, instr_sltu, instr_xor, instr_srl, instr_sra, instr_or, instr_and;$/;"	r
instr_xori	picorv32.v	/^	reg instr_addi, instr_slti, instr_sltiu, instr_xori, instr_ori, instr_andi, instr_slli, instr_srli, instr_srai;$/;"	r
irq	picorv32.v	/^	input      [31:0] irq,$/;"	p
irq_active	picorv32.v	/^	reg irq_active;$/;"	r
irq_delay	picorv32.v	/^	reg irq_delay;$/;"	r
irq_mask	picorv32.v	/^	reg [31:0] irq_mask;$/;"	r
irq_pending	picorv32.v	/^	reg [31:0] irq_pending;$/;"	r
irq_state	picorv32.v	/^	reg [1:0] irq_state;$/;"	r
is_alu_reg_imm	picorv32.v	/^	reg is_alu_reg_imm;$/;"	r
is_alu_reg_reg	picorv32.v	/^	reg is_alu_reg_reg;$/;"	r
is_beq_bne_blt_bge_bltu_bgeu	picorv32.v	/^	reg is_beq_bne_blt_bge_bltu_bgeu;$/;"	r
is_compare	picorv32.v	/^	reg is_compare;$/;"	r
is_jalr_addi_slti_sltiu_xori_ori_andi	picorv32.v	/^	reg is_jalr_addi_slti_sltiu_xori_ori_andi;$/;"	r
is_lb_lh_lw_lbu_lhu	picorv32.v	/^	reg is_lb_lh_lw_lbu_lhu;$/;"	r
is_lbu_lhu_lw	picorv32.v	/^	reg is_lbu_lhu_lw;$/;"	r
is_lui_auipc_jal	picorv32.v	/^	reg is_lui_auipc_jal;$/;"	r
is_lui_auipc_jal_jalr_addi_add_sub	picorv32.v	/^	reg is_lui_auipc_jal_jalr_addi_add_sub;$/;"	r
is_rdcycle_rdcycleh_rdinstr_rdinstrh	picorv32.v	/^	wire is_rdcycle_rdcycleh_rdinstr_rdinstrh;$/;"	n
is_sb_sh_sw	picorv32.v	/^	reg is_sb_sh_sw;$/;"	r
is_sll_srl_sra	picorv32.v	/^	reg is_sll_srl_sra;$/;"	r
is_slli_srli_srai	picorv32.v	/^	reg is_slli_srli_srai;$/;"	r
is_slti_blt_slt	picorv32.v	/^	reg is_slti_blt_slt;$/;"	r
is_sltiu_bltu_sltu	picorv32.v	/^	reg is_sltiu_bltu_sltu;$/;"	r
l	doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
l	old_doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
last_mem_la_addr	picorv32.v	/^	reg [31:0] last_mem_la_addr;$/;"	r
last_mem_la_read	picorv32.v	/^	reg last_mem_la_read = 0;$/;"	r
last_mem_la_wdata	picorv32.v	/^	reg [31:0] last_mem_la_wdata;$/;"	r
last_mem_la_write	picorv32.v	/^	reg last_mem_la_write = 0;$/;"	r
last_mem_la_wstrb	picorv32.v	/^	reg [3:0] last_mem_la_wstrb = 0;$/;"	r
last_mem_nowait	picorv32.v	/^	reg [3:0] last_mem_nowait;$/;"	r
last_mem_valid	picorv32.v	/^	reg mem_la_secondword, mem_la_firstword_reg, last_mem_valid;$/;"	r
latched_branch	picorv32.v	/^	reg latched_branch;$/;"	r
latched_compr	picorv32.v	/^	reg latched_compr;$/;"	r
latched_is_lb	picorv32.v	/^	reg latched_is_lb;$/;"	r
latched_is_lh	picorv32.v	/^	reg latched_is_lh;$/;"	r
latched_is_lu	picorv32.v	/^	reg latched_is_lu;$/;"	r
latched_rd	picorv32.v	/^	reg [regindex_bits-1:0] latched_rd;$/;"	r
latched_stalu	picorv32.v	/^	reg latched_stalu;$/;"	r
latched_store	picorv32.v	/^	reg latched_store;$/;"	r
latched_trace	picorv32.v	/^	reg latched_trace;$/;"	r
launch_next_insn	picorv32.v	/^	wire launch_next_insn;$/;"	n
loadUserSettings	doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
loadUserSettings	old_doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
load_only	cpu.v	/^reg load_only;          \/\/ LDA\/LDX\/LDY instruction$/;"	r
load_only	cpu_syncreset.v	/^reg load_only;          \/\/ LDA\/LDX\/LDY instruction$/;"	r
load_reg	cpu.v	/^reg load_reg;           \/\/ loading a register (A, X, Y, S) in this instruction$/;"	r
load_reg	cpu_syncreset.v	/^reg load_reg;           \/\/ loading a register (A, X, Y, S) in this instruction$/;"	r
mac	mac.v	/^module mac ($/;"	m
math	connectors_placement.py	/^import math$/;"	i
math	set_hitas_environement.py	/^import math$/;"	i
mem_16bit_buffer	picorv32.v	/^	reg [15:0] mem_16bit_buffer;$/;"	r
mem_busy	picorv32.v	/^	wire mem_busy = |{mem_do_prefetch, mem_do_rinst, mem_do_rdata, mem_do_wdata};$/;"	n
mem_do_prefetch	picorv32.v	/^	reg mem_do_prefetch;$/;"	r
mem_do_rdata	picorv32.v	/^	reg mem_do_rdata;$/;"	r
mem_do_rdata	picorv32.v	/^	wire mem_busy = |{mem_do_prefetch, mem_do_rinst, mem_do_rdata, mem_do_wdata};$/;"	n
mem_do_rinst	picorv32.v	/^	reg mem_do_rinst;$/;"	r
mem_do_rinst	picorv32.v	/^	wire mem_busy = |{mem_do_prefetch, mem_do_rinst, mem_do_rdata, mem_do_wdata};$/;"	n
mem_do_wdata	picorv32.v	/^	reg mem_do_wdata;$/;"	r
mem_do_wdata	picorv32.v	/^	wire mem_busy = |{mem_do_prefetch, mem_do_rinst, mem_do_rdata, mem_do_wdata};$/;"	n
mem_done	picorv32.v	/^	wire mem_done = resetn && ((mem_xfer && |mem_state && (mem_do_rinst || mem_do_rdata || mem_do_wdata)) || (&mem_state && mem_do_rinst)) &&$/;"	n
mem_la_firstword	picorv32.v	/^	wire mem_la_firstword = COMPRESSED_ISA && (mem_do_prefetch || mem_do_rinst) && next_pc[1] && !mem_la_secondword;$/;"	n
mem_la_firstword_reg	picorv32.v	/^	reg mem_la_secondword, mem_la_firstword_reg, last_mem_valid;$/;"	r
mem_la_firstword_xfer	picorv32.v	/^	wire mem_la_firstword_xfer = COMPRESSED_ISA && mem_xfer && (!last_mem_valid ? mem_la_firstword : mem_la_firstword_reg);$/;"	n
mem_la_secondword	picorv32.v	/^	reg mem_la_secondword, mem_la_firstword_reg, last_mem_valid;$/;"	r
mem_la_use_prefetched_high_word	picorv32.v	/^	wire mem_la_use_prefetched_high_word = COMPRESSED_ISA && mem_la_firstword && prefetched_high_word && !clear_prefetched_high_word;$/;"	n
mem_la_write	picorv32.v	/^	output            mem_la_write,$/;"	p
mem_rdata	picorv32.v	/^	input      [31:0] mem_rdata,$/;"	p
mem_rdata_latched	picorv32.v	/^	wire [31:0] mem_rdata_latched;$/;"	n
mem_rdata_latched_noshuffle	picorv32.v	/^	wire [31:0] mem_rdata_latched_noshuffle;$/;"	n
mem_rdata_q	picorv32.v	/^	reg [31:0] mem_rdata_q;$/;"	r
mem_rdata_word	picorv32.v	/^	reg [31:0] mem_rdata_word;$/;"	r
mem_ready	picorv32.v	/^	input             mem_ready,$/;"	p
mem_state	picorv32.v	/^	reg [1:0] mem_state;$/;"	r
mem_wordsize	picorv32.v	/^	reg [1:0] mem_wordsize;$/;"	r
mem_xfer	picorv32.v	/^	wire mem_xfer;$/;"	n
modify_hitas_spi_file	set_hitas_environement.py	/^def modify_hitas_spi_file(template_file,entity,spi_file):$/;"	f
modify_spi_file	set_hitas_environement.py	/^def modify_spi_file(spi_file,lib):$/;"	f
n	doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
n	old_doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
new_ascii_instr	picorv32.v	/^	reg [63:0] new_ascii_instr;$/;"	r
next_insn_opcode	picorv32.v	/^	reg [31:0] next_insn_opcode;$/;"	r
next_irq_pending	picorv32.v	/^	reg [31:0] next_irq_pending;$/;"	r
next_pc	picorv32.v	/^	wire [31:0] next_pc;$/;"	n
number_of_bits	connectors_placement.py	/^def number_of_bits(D):$/;"	f
number_of_connectors	connectors_placement.py	/^def number_of_connectors(L):$/;"	f
ok	picorv32.v	/^	reg ok;$/;"	r
op	ALU.v	/^	input [3:0] op;		\/\/ operation$/;"	p
op	cpu.v	/^reg [3:0] op;           \/\/ Main ALU operation for instruction$/;"	r
op	cpu_syncreset.v	/^reg [3:0] op;           \/\/ Main ALU operation for instruction$/;"	r
order_of_placement	connectors_placement.py	/^def order_of_placement(dico):$/;"	f
os	connectors_placement.py	/^import os$/;"	i
os	doDesign.py	/^import os$/;"	i
os	old_doDesign.py	/^import os$/;"	i
os	set_hitas_environement.py	/^import os$/;"	i
output	picorv32.v	/^	output            mem_la_read,$/;"	p
output	picorv32.v	/^	output     [31:0] mem_la_addr,$/;"	p
output	picorv32.v	/^	output     [31:0] pcpi_rs2,$/;"	p
output	picorv32.v	/^	output reg [31:0] eoi,$/;"	p
output	picorv32.v	/^	output reg [31:0] mem_addr,$/;"	p
output	picorv32.v	/^	output reg trap,$/;"	p
parameter	picorv32.v	/^	parameter [ 0:0] CATCH_ILLINSN = 1,$/;"	c
parameter	picorv32.v	/^	parameter [ 0:0] COMPRESSED_ISA = 0,$/;"	c
parameter	picorv32.v	/^	parameter [ 0:0] ENABLE_COUNTERS64 = 1,$/;"	c
parameter	picorv32.v	/^	parameter [ 0:0] ENABLE_DIV = 0,$/;"	c
parameter	picorv32.v	/^	parameter [ 0:0] ENABLE_IRQ_QREGS = 1,$/;"	c
parameter	picorv32.v	/^	parameter [ 0:0] ENABLE_MUL = 0,$/;"	c
parameter	picorv32.v	/^	parameter [ 0:0] ENABLE_REGS_DUALPORT = 1,$/;"	c
parameter	picorv32.v	/^	parameter [ 0:0] ENABLE_TRACE = 0,$/;"	c
parameter	picorv32.v	/^	parameter [ 0:0] TWO_CYCLE_COMPARE = 0,$/;"	c
parameter	picorv32.v	/^	parameter [ 0:0] TWO_STAGE_SHIFT = 1,$/;"	c
parameter	picorv32.v	/^	parameter [31:0] MASKED_IRQ = 32'h 0000_0000,$/;"	c
parameter	picorv32.v	/^	parameter [31:0] PROGADDR_RESET = 32'h 0000_0000,$/;"	c
parameter	picorv32.v	/^	parameter [31:0] STACKADDR = 32'h ffff_ffff$/;"	c
partial_product	mac.v	/^  wire [7:0] partial_product;$/;"	n
pcpi_div_rd	picorv32.v	/^	wire [31:0] pcpi_div_rd;$/;"	n
pcpi_div_ready	picorv32.v	/^	wire        pcpi_div_ready;$/;"	n
pcpi_div_wait	picorv32.v	/^	wire        pcpi_div_wait;$/;"	n
pcpi_div_wr	picorv32.v	/^	wire        pcpi_div_wr;$/;"	n
pcpi_int_rd	picorv32.v	/^	reg [31:0] pcpi_int_rd;$/;"	r
pcpi_int_ready	picorv32.v	/^	reg        pcpi_int_ready;$/;"	r
pcpi_int_wait	picorv32.v	/^	reg        pcpi_int_wait;$/;"	r
pcpi_int_wr	picorv32.v	/^	reg        pcpi_int_wr;$/;"	r
pcpi_mul_rd	picorv32.v	/^	wire [31:0] pcpi_mul_rd;$/;"	n
pcpi_mul_ready	picorv32.v	/^	wire        pcpi_mul_ready;$/;"	n
pcpi_mul_wait	picorv32.v	/^	wire        pcpi_mul_wait;$/;"	n
pcpi_mul_wr	picorv32.v	/^	wire        pcpi_mul_wr;$/;"	n
pcpi_rs1	picorv32.v	/^	output     [31:0] pcpi_rs1,$/;"	p
pcpi_timeout	picorv32.v	/^	reg pcpi_timeout;$/;"	r
pcpi_timeout_counter	picorv32.v	/^	reg [3:0] pcpi_timeout_counter;$/;"	r
pcpi_wait	picorv32.v	/^	input             pcpi_wait,$/;"	p
pcpi_wr	picorv32.v	/^	input             pcpi_wr,$/;"	p
php	cpu.v	/^reg php;                \/\/ doing PHP instruction $/;"	r
php	cpu_syncreset.v	/^reg php;                \/\/ doing PHP instruction $/;"	r
picorv32	picorv32.v	/^module picorv32 #($/;"	m
plp	cpu.v	/^reg plp;                \/\/ doing PLP instruction$/;"	r
plp	cpu_syncreset.v	/^reg plp;                \/\/ doing PLP instruction$/;"	r
plugins	doDesign.py	/^from   coriolis            import plugins$/;"	i
plugins	old_doDesign.py	/^from   coriolis            import plugins$/;"	i
pnrcheck	dodo.py	/^from coriolis.designflow          import pnrcheck$/;"	i
prefetched_high_word	picorv32.v	/^	reg prefetched_high_word;$/;"	r
q_ascii_instr	picorv32.v	/^	reg [63:0] q_ascii_instr;$/;"	r
q_insn_imm	picorv32.v	/^	reg [31:0] q_insn_imm;$/;"	r
q_insn_opcode	picorv32.v	/^	reg [31:0] q_insn_opcode;$/;"	r
q_insn_rd	picorv32.v	/^	reg [4:0] q_insn_rd;$/;"	r
q_insn_rs1	picorv32.v	/^	reg [4:0] q_insn_rs1;$/;"	r
q_insn_rs2	picorv32.v	/^	reg [4:0] q_insn_rs2;$/;"	r
re	connectors_placement.py	/^import re$/;"	i
re	set_hitas_environement.py	/^import re$/;"	i
reg	cpu.v	/^output reg [15:0] AB;   \/\/ address bus$/;"	p
reg	cpu_syncreset.v	/^output reg [15:0] AB;   \/\/ address bus$/;"	p
reg	picorv32.v	/^	output reg        mem_instr,$/;"	p
reg	picorv32.v	/^	output reg        mem_valid,$/;"	p
reg	picorv32.v	/^	output reg        pcpi_valid,$/;"	p
reg	picorv32.v	/^	output reg        rvfi_halt,$/;"	p
reg	picorv32.v	/^	output reg        rvfi_intr,$/;"	p
reg	picorv32.v	/^	output reg        rvfi_trap,$/;"	p
reg	picorv32.v	/^	output reg        rvfi_valid,$/;"	p
reg	picorv32.v	/^	output reg        trace_valid,$/;"	p
reg	picorv32.v	/^	output reg [ 1:0] rvfi_ixl,$/;"	p
reg	picorv32.v	/^	output reg [ 1:0] rvfi_mode,$/;"	p
reg	picorv32.v	/^	output reg [ 3:0] mem_la_wstrb,$/;"	p
reg	picorv32.v	/^	output reg [ 3:0] mem_wstrb,$/;"	p
reg	picorv32.v	/^	output reg [ 3:0] rvfi_mem_rmask,$/;"	p
reg	picorv32.v	/^	output reg [ 3:0] rvfi_mem_wmask,$/;"	p
reg	picorv32.v	/^	output reg [ 4:0] rvfi_rd_addr,$/;"	p
reg	picorv32.v	/^	output reg [ 4:0] rvfi_rs1_addr,$/;"	p
reg	picorv32.v	/^	output reg [ 4:0] rvfi_rs2_addr,$/;"	p
reg	picorv32.v	/^	output reg [31:0] mem_la_wdata,$/;"	p
reg	picorv32.v	/^	output reg [31:0] mem_wdata,$/;"	p
reg	picorv32.v	/^	output reg [31:0] pcpi_insn,$/;"	p
reg	picorv32.v	/^	output reg [31:0] rvfi_insn,$/;"	p
reg	picorv32.v	/^	output reg [31:0] rvfi_mem_addr,$/;"	p
reg	picorv32.v	/^	output reg [31:0] rvfi_mem_rdata,$/;"	p
reg	picorv32.v	/^	output reg [31:0] rvfi_mem_wdata,$/;"	p
reg	picorv32.v	/^	output reg [31:0] rvfi_pc_rdata,$/;"	p
reg	picorv32.v	/^	output reg [31:0] rvfi_pc_wdata,$/;"	p
reg	picorv32.v	/^	output reg [31:0] rvfi_rd_wdata,$/;"	p
reg	picorv32.v	/^	output reg [31:0] rvfi_rs1_rdata,$/;"	p
reg	picorv32.v	/^	output reg [31:0] rvfi_rs2_rdata,$/;"	p
reg	picorv32.v	/^	output reg [35:0] trace_data$/;"	p
reg	picorv32.v	/^	output reg [63:0] rvfi_csr_mcycle_rdata,$/;"	p
reg	picorv32.v	/^	output reg [63:0] rvfi_csr_mcycle_rmask,$/;"	p
reg	picorv32.v	/^	output reg [63:0] rvfi_csr_mcycle_wdata,$/;"	p
reg	picorv32.v	/^	output reg [63:0] rvfi_csr_mcycle_wmask,$/;"	p
reg	picorv32.v	/^	output reg [63:0] rvfi_csr_minstret_rdata,$/;"	p
reg	picorv32.v	/^	output reg [63:0] rvfi_csr_minstret_rmask,$/;"	p
reg	picorv32.v	/^	output reg [63:0] rvfi_csr_minstret_wdata,$/;"	p
reg	picorv32.v	/^	output reg [63:0] rvfi_csr_minstret_wmask,$/;"	p
reg	picorv32.v	/^	output reg [63:0] rvfi_order,$/;"	p
reg_next_pc	picorv32.v	/^	reg [31:0] reg_pc, reg_next_pc, reg_op1, reg_op2, reg_out;$/;"	r
reg_op1	picorv32.v	/^	reg [31:0] reg_pc, reg_next_pc, reg_op1, reg_op2, reg_out;$/;"	r
reg_op2	picorv32.v	/^	reg [31:0] reg_pc, reg_next_pc, reg_op1, reg_op2, reg_out;$/;"	r
reg_out	picorv32.v	/^	reg [31:0] reg_pc, reg_next_pc, reg_op1, reg_op2, reg_out;$/;"	r
reg_pc	picorv32.v	/^	reg [31:0] reg_pc, reg_next_pc, reg_op1, reg_op2, reg_out;$/;"	r
reg_sh	picorv32.v	/^	reg [4:0] reg_sh;$/;"	r
regfile	cpu.v	/^wire [7:0] regfile = AXYS[regsel];      \/\/ Selected register output$/;"	n
regfile	cpu_syncreset.v	/^wire [7:0] regfile = AXYS[regsel];      \/\/ Selected register output$/;"	n
regsel	cpu.v	/^reg [1:0] regsel;                       \/\/ Select A, X, Y or S register$/;"	r
regsel	cpu_syncreset.v	/^reg [1:0] regsel;                       \/\/ Select A, X, Y or S register$/;"	r
replace_area	connectors_placement.py	/^def replace_area(filename,h,v):$/;"	f
replace_dummy	connectors_placement.py	/^def replace_dummy(filename,real_name):$/;"	f
res	cpu.v	/^reg res;                \/\/ in reset$/;"	r
res	cpu_syncreset.v	/^reg res;                \/\/ in reset$/;"	r
reset	Arlet6502.v	/^input reset;            \/\/ reset signal$/;"	p
reset	arlet6502.v	/^input reset;            \/\/ reset signal$/;"	p
reset	cpu.v	/^input reset;            \/\/ reset signal$/;"	p
reset	cpu_syncreset.v	/^input reset;            \/\/ reset signal$/;"	p
resetn	picorv32.v	/^	input clk, resetn,$/;"	p
right	ALU.v	/^	input right;$/;"	p
rotate	cpu.v	/^reg rotate;             \/\/ doing rotate (no shift)$/;"	r
rotate	cpu_syncreset.v	/^reg rotate;             \/\/ doing rotate (no shift)$/;"	r
routine	connectors_placement.py	/^def routine(file,entity,h_area,v_area,horizontal_pitch,vertical_pitch,comb,clk_name='clk',reset_name='reset'):$/;"	f
routine_with_sta	connectors_placement.py	/^def routine_with_sta(file,entity,h_area,v_area,horizontal_pitch,vertical_pitch,comb,lib,model,clk_name='clk',reset_name='reset'):$/;"	f
rvalue	doDesign.py	/^    rvalue = scriptMain()$/;"	v
rvalue	old_doDesign.py	/^    rvalue = scriptMain()$/;"	v
scriptMain	doDesign.py	/^def scriptMain ( **kw ):$/;"	f
scriptMain	dodo.py	/^from doDesign  import scriptMain$/;"	i
scriptMain	old_doDesign.py	/^def scriptMain ( **kw ):$/;"	f
sec	cpu.v	/^reg sec;                \/\/ set carry$/;"	r
sec	cpu_syncreset.v	/^reg sec;                \/\/ set carry$/;"	r
sed	cpu.v	/^reg sed;                \/\/ set decimal$/;"	r
sed	cpu_syncreset.v	/^reg sed;                \/\/ set decimal$/;"	r
sei	cpu.v	/^reg sei;                \/\/ set interrupt$/;"	r
sei	cpu_syncreset.v	/^reg sei;                \/\/ set interrupt$/;"	r
setTraceLevel	doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
setTraceLevel	old_doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
set_mem_do_rdata	picorv32.v	/^	reg set_mem_do_rdata;$/;"	r
set_mem_do_rinst	picorv32.v	/^	reg set_mem_do_rinst;$/;"	r
set_mem_do_wdata	picorv32.v	/^	reg set_mem_do_wdata;$/;"	r
setupSky130_c4m	connectors_placement.py	/^ from coriolis.designflow.technos import setupSky130_c4m$/;"	i
setupSky130_nsx2	dodo.py	/^from coriolis.designflow.technos import setupSky130_nsx2$/;"	i
shellRValue	doDesign.py	/^    shellRValue = 0 if rvalue else 1$/;"	v
shellRValue	old_doDesign.py	/^    shellRValue = 0 if rvalue else 1$/;"	v
shift	cpu.v	/^reg shift;              \/\/ doing shift\/rotate instruction$/;"	r
shift	cpu_syncreset.v	/^reg shift;              \/\/ doing shift\/rotate instruction$/;"	r
shift_right	cpu.v	/^reg shift_right;        \/\/ Instruction ALU shift\/rotate right $/;"	r
shift_right	cpu_syncreset.v	/^reg shift_right;        \/\/ Instruction ALU shift\/rotate right $/;"	r
signals_per_side	connectors_placement.py	/^def signals_per_side(dico,horizontal_size,vertical_size,horizontal_pitch,vertical_pitch):$/;"	f
src_reg	cpu.v	/^reg [1:0] src_reg;      \/\/ source register index$/;"	r
src_reg	cpu_syncreset.v	/^reg [1:0] src_reg;      \/\/ source register index$/;"	r
state	cpu.v	/^reg [5:0] state;$/;"	r
state	cpu_syncreset.v	/^reg [5:0] state;$/;"	r
statename	cpu.v	/^reg [8*6-1:0] statename;$/;"	r
statename	cpu_syncreset.v	/^reg [8*6-1:0] statename;$/;"	r
store	cpu.v	/^reg store;              \/\/ doing store (STA\/STX\/STY)$/;"	r
store	cpu_syncreset.v	/^reg store;              \/\/ doing store (STA\/STX\/STY)$/;"	r
subprocess	connectors_placement.py	/^import subprocess$/;"	i
subprocess	set_hitas_environement.py	/^import subprocess$/;"	i
synthesis_and_initialize	connectors_placement.py	/^def synthesis_and_initialize(entity):$/;"	f
sys	connectors_placement.py	/^import sys$/;"	i
sys	doDesign.py	/^import sys$/;"	i
sys	old_doDesign.py	/^import sys$/;"	i
sys	set_hitas_environement.py	/^import sys$/;"	i
temp	ALU.v	/^wire [8:0] temp = { temp_h, temp_l[3:0] };$/;"	n
temp_BI	ALU.v	/^reg [7:0] temp_BI;$/;"	r
temp_HC	ALU.v	/^wire temp_HC = temp_l[4] | HC9;$/;"	n
temp_h	ALU.v	/^reg [4:0] temp_h;$/;"	r
temp_l	ALU.v	/^reg [4:0] temp_l;$/;"	r
temp_l	ALU.v	/^wire [8:0] temp = { temp_h, temp_l[3:0] };$/;"	n
temp_logic	ALU.v	/^reg [8:0] temp_logic;$/;"	r
time	connectors_placement.py	/^import time$/;"	i
time	set_hitas_environement.py	/^import time$/;"	i
timer	picorv32.v	/^	reg [31:0] timer;$/;"	r
trace	doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
trace	old_doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
traceback	doDesign.py	/^import traceback$/;"	i
traceback	old_doDesign.py	/^import traceback$/;"	i
u	doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
u	old_doDesign.py	/^from   coriolis.helpers    import loadUserSettings, setTraceLevel, trace, l, u, n$/;"	i
vector_or_bit	connectors_placement.py	/^def vector_or_bit(i):$/;"	f
wire	mac.v	/^  input wire [3:0] multiplicand,$/;"	p
wire	mac.v	/^  input wire [3:0] multiplier,$/;"	p
wire	mac.v	/^  input wire clk,$/;"	p
wire	mac.v	/^  input wire reset,$/;"	p
wire	mac.v	/^  output wire [7:0] accumulator_out$/;"	p
write_back	cpu.v	/^reg write_back;         \/\/ set if memory is read\/modified\/written $/;"	r
write_back	cpu_syncreset.v	/^reg write_back;         \/\/ set if memory is read\/modified\/written $/;"	r
write_connectors_in_file	connectors_placement.py	/^def write_connectors_in_file(filename, expression_to_detect, expression_to_write):$/;"	f
write_register	cpu.v	/^reg write_register;             \/\/ set when register file is written$/;"	r
write_register	cpu_syncreset.v	/^reg write_register;             \/\/ set when register file is written$/;"	r
