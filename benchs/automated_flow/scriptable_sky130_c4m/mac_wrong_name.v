/* Generated by Yosys 0.37+52 (git sha1 353797647, clang 16.0.6 -fPIC -Os) */

(* src = "mac.v:1.1-26.10" *)
module mac_wrong_name (clk, reset, multiplier, multiplicand, accumulator_out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  (* force_downto = 32'd1 *)
  (* src = "mac.v:20.22-20.51|/users/cao/aoudrhiri/.local/bin/../share/yosys/techmap.v:270.23-270.24" *)
  (* unused_bits = "1 2 3 4 5 6 7" *)
  wire [7:0] _093_;
  (* force_downto = 32'd1 *)
  (* src = "mac.v:20.22-20.51|/users/cao/aoudrhiri/.local/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [7:0] _094_;
  (* force_downto = 32'd1 *)
  (* src = "/users/cao/aoudrhiri/.local/bin/../share/yosys/techmap.v:198.20-198.21" *)
  (* unused_bits = "1 2 3" *)
  wire [7:0] _095_;
  (* force_downto = 32'd1 *)
  (* src = "/users/cao/aoudrhiri/.local/bin/../share/yosys/techmap.v:200.24-200.25" *)
  (* unused_bits = "2 3 4 5" *)
  wire [7:0] _096_;
  (* force_downto = 32'd1 *)
  (* src = "/users/cao/aoudrhiri/.local/bin/../share/yosys/techmap.v:200.24-200.25" *)
  (* unused_bits = "3 4 5 6" *)
  wire [7:0] _097_;
  (* force_downto = 32'd1 *)
  (* src = "/users/cao/aoudrhiri/.local/bin/../share/yosys/techmap.v:274.23-274.25" *)
  (* unused_bits = "3 4 5" *)
  wire [7:0] _098_;
  (* force_downto = 32'd1 *)
  (* src = "/users/cao/aoudrhiri/.local/bin/../share/yosys/techmap.v:270.23-270.24" *)
  (* unused_bits = "4 5 6" *)
  wire [7:0] _099_;
  (* force_downto = 32'd1 *)
  (* src = "/users/cao/aoudrhiri/.local/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [7:0] _100_;
  (* src = "mac.v:9.13-9.24" *)
  reg [7:0] accumulator;
  (* src = "mac.v:6.21-6.36" *)
  output [7:0] accumulator_out;
  wire [7:0] accumulator_out;
  (* src = "mac.v:2.14-2.17" *)
  input clk;
  wire clk;
  (* src = "mac.v:5.20-5.32" *)
  input [3:0] multiplicand;
  wire [3:0] multiplicand;
  (* src = "mac.v:4.20-4.30" *)
  input [3:0] multiplier;
  wire [3:0] multiplier;
  (* src = "mac.v:10.14-10.29" *)
  reg [7:0] partial_product;
  (* src = "mac.v:3.14-3.19" *)
  input reset;
  wire reset;
  assign _095_[0] = multiplicand[0] & multiplier[0];
  assign _045_ = partial_product[1] ^ accumulator[1];
  assign _046_ = ~(partial_product[0] & accumulator[0]);
  assign _094_[1] = ~(_046_ ^ _045_);
  assign _047_ = ~(partial_product[2] ^ accumulator[2]);
  assign _048_ = partial_product[1] & accumulator[1];
  assign _049_ = _045_ & ~(_046_);
  assign _050_ = _049_ | _048_;
  assign _094_[2] = ~(_050_ ^ _047_);
  assign _051_ = ~(partial_product[3] ^ accumulator[3]);
  assign _052_ = ~(partial_product[2] & accumulator[2]);
  assign _053_ = _050_ & ~(_047_);
  assign _054_ = _052_ & ~(_053_);
  assign _094_[3] = _054_ ^ _051_;
  assign _055_ = ~(partial_product[4] ^ accumulator[4]);
  assign _056_ = ~(partial_product[3] & accumulator[3]);
  assign _057_ = ~(_052_ | _051_);
  assign _058_ = _056_ & ~(_057_);
  assign _059_ = _051_ | _047_;
  assign _060_ = _050_ & ~(_059_);
  assign _061_ = _058_ & ~(_060_);
  assign _094_[4] = _061_ ^ _055_;
  assign _062_ = ~(partial_product[5] ^ accumulator[5]);
  assign _063_ = ~(partial_product[4] & accumulator[4]);
  assign _064_ = ~(_061_ | _055_);
  assign _065_ = _063_ & ~(_064_);
  assign _094_[5] = _065_ ^ _062_;
  assign _066_ = ~(partial_product[6] ^ accumulator[6]);
  assign _067_ = ~(partial_product[5] & accumulator[5]);
  assign _068_ = ~(_063_ | _062_);
  assign _069_ = _067_ & ~(_068_);
  assign _070_ = _062_ | _055_;
  assign _071_ = ~(_070_ | _061_);
  assign _072_ = _069_ & ~(_071_);
  assign _094_[6] = _072_ ^ _066_;
  assign _073_ = ~(partial_product[7] ^ accumulator[7]);
  assign _074_ = ~(partial_product[6] & accumulator[6]);
  assign _075_ = ~(_072_ | _066_);
  assign _076_ = _074_ & ~(_075_);
  assign _094_[7] = _076_ ^ _073_;
  assign _093_[0] = partial_product[0] ^ accumulator[0];
  assign _077_ = multiplier[1] & multiplicand[0];
  assign _078_ = multiplicand[1] & multiplier[0];
  assign _096_[1] = _078_ ^ _077_;
  assign _079_ = ~(multiplier[2] & multiplicand[0]);
  assign _080_ = ~(multiplicand[1] & multiplier[1]);
  assign _081_ = _080_ ^ _079_;
  assign _082_ = ~(multiplicand[2] & multiplier[0]);
  assign _083_ = _082_ ^ _081_;
  assign _084_ = _078_ & _077_;
  assign _085_ = ~_084_;
  assign _097_[2] = _085_ ^ _083_;
  assign _086_ = ~(multiplicand[1] & multiplier[3]);
  assign _087_ = multiplicand[2] & multiplier[2];
  assign _088_ = _087_ ^ _086_;
  assign _089_ = ~(multiplier[3] & multiplicand[0]);
  assign _090_ = multiplicand[1] & multiplier[2];
  assign _091_ = _089_ | ~(_090_);
  assign _092_ = multiplicand[2] & multiplier[1];
  assign _000_ = _090_ ^ _089_;
  assign _001_ = _092_ & ~(_000_);
  assign _002_ = _091_ & ~(_001_);
  assign _003_ = _002_ ^ _088_;
  assign _004_ = ~(multiplicand[3] & multiplier[1]);
  assign _005_ = _004_ ^ _003_;
  assign _006_ = ~(_000_ ^ _092_);
  assign _007_ = _080_ | _079_;
  assign _008_ = _081_ & ~(_082_);
  assign _009_ = _007_ & ~(_008_);
  assign _010_ = _009_ | ~(_006_);
  assign _011_ = multiplicand[3] & multiplier[0];
  assign _012_ = _009_ ^ _006_;
  assign _013_ = _011_ & ~(_012_);
  assign _014_ = _010_ & ~(_013_);
  assign _015_ = ~(_014_ ^ _005_);
  assign _016_ = ~(_012_ ^ _011_);
  assign _017_ = _085_ | _083_;
  assign _018_ = _016_ & ~(_017_);
  assign _100_[4] = ~(_018_ ^ _015_);
  assign _019_ = ~(multiplicand[2] & multiplier[3]);
  assign _020_ = _087_ & ~(_086_);
  assign _021_ = ~(_020_ ^ _019_);
  assign _022_ = multiplicand[3] & multiplier[2];
  assign _023_ = ~_022_;
  assign _024_ = _023_ ^ _021_;
  assign _025_ = _002_ | _088_;
  assign _026_ = _003_ & ~(_004_);
  assign _027_ = _025_ & ~(_026_);
  assign _028_ = ~(_027_ ^ _024_);
  assign _029_ = _014_ | _005_;
  assign _030_ = _018_ & ~(_015_);
  assign _031_ = _029_ & ~(_030_);
  assign _100_[5] = _031_ ^ _028_;
  assign _032_ = multiplicand[3] & multiplier[3];
  assign _033_ = _019_ | ~(_020_);
  assign _034_ = _021_ & ~(_023_);
  assign _035_ = _033_ & ~(_034_);
  assign _036_ = _035_ ^ _032_;
  assign _037_ = _027_ | _024_;
  assign _038_ = ~(_029_ | _028_);
  assign _039_ = _037_ & ~(_038_);
  assign _040_ = _028_ | _015_;
  assign _041_ = _018_ & ~(_040_);
  assign _042_ = _039_ & ~(_041_);
  assign _100_[6] = _042_ ^ _036_;
  assign _099_[3] = ~(_017_ ^ _016_);
  assign _043_ = _032_ & ~(_035_);
  assign _044_ = ~(_042_ | _036_);
  assign _098_[6] = _044_ | _043_;
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (!reset) partial_product[0] <= _095_[0];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (!reset) partial_product[1] <= _096_[1];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (!reset) partial_product[2] <= _097_[2];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (!reset) partial_product[3] <= _099_[3];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (!reset) partial_product[4] <= _100_[4];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (!reset) partial_product[5] <= _100_[5];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (!reset) partial_product[6] <= _100_[6];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (!reset) partial_product[7] <= _098_[6];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (reset) accumulator[0] <= 1'h0;
    else accumulator[0] <= _093_[0];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (reset) accumulator[1] <= 1'h0;
    else accumulator[1] <= _094_[1];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (reset) accumulator[2] <= 1'h0;
    else accumulator[2] <= _094_[2];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (reset) accumulator[3] <= 1'h0;
    else accumulator[3] <= _094_[3];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (reset) accumulator[4] <= 1'h0;
    else accumulator[4] <= _094_[4];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (reset) accumulator[5] <= 1'h0;
    else accumulator[5] <= _094_[5];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (reset) accumulator[6] <= 1'h0;
    else accumulator[6] <= _094_[6];
  (* src = "mac.v:12.3-22.6" *)
  always @(posedge clk)
    if (reset) accumulator[7] <= 1'h0;
    else accumulator[7] <= _094_[7];
  assign _094_[0] = _093_[0];
  assign _095_[7:4] = 4'h0;
  assign { _096_[7:6], _096_[0] } = { 2'h0, _095_[0] };
  assign { _097_[7], _097_[1:0] } = { 1'h0, _096_[1], _095_[0] };
  assign { _098_[7], _098_[2:0] } = 4'h0;
  assign { _099_[7], _099_[2:0] } = { 1'h0, _097_[2], _096_[1], _095_[0] };
  assign { _100_[7], _100_[3:0] } = { _098_[6], _099_[3], _097_[2], _096_[1], _095_[0] };
  assign accumulator_out = accumulator;
endmodule
